extends PathFollow2D

const BASE_MOTION_SPEED: float = 100.0
const BOMB_RATE: float = 0.5
const MAX_BOMB_OWNABLE: int = 99
const GRACE: float = 0

@export var synced_progress: float = 0;
#@export var stunned: bool = false #unsure if misobon players can be stunned

@onready var inputs = $Inputs

var last_bomb_time: float = BOMB_RATE
var current_anim: String = ""
var is_rejoining: bool = false

var path_len: float
#TODO figure out how the f to throw bomb

func _ready() -> void:
	progress = synced_progress
	if str(name).is_valid_int():
		get_node("Inputs/InputsSync").set_multiplayer_authority(str(name).to_int())
	path_len = get_node("..").get_baked_points() #This could become a problem is our path is ever not an integer, tho it should remain on.	

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	if multiplayer.multiplayer_peer == null or str(multiplayer.get_unique_id()) == str(name):
		# The client which this player represent will update the controls state, and notify it to everyone.
		inputs.update(synced_progress, path_len / 4, GRACE) #dn why int division is a warning this is very much on purpose

	if multiplayer.multiplayer_peer == null or is_multiplayer_authority():
		# The server updates the position that will be notified to the clients.
		synced_progress = progress;
		# And increase the bomb cooldown spawning one if the client wants to.
		last_bomb_time += delta
		if not stunned and is_multiplayer_authority() and inputs.bombing and last_bomb_time >= BOMB_RATE:
			if tileMap != null:
				bombPos = tileMap.map_to_local(tileMap.local_to_map(synced_position))
				
			last_bomb_time = 0.0
	
